CollectSourceFiles(
  ${CMAKE_CURRENT_SOURCE_DIR}
  PRIVATE_SOURCES)

GroupSources(${CMAKE_CURRENT_SOURCE_DIR})

INCLUDE_DIRECTORIES(${SFML_LIB}/include ${TINY_XML_LIB}/include)

# LINK EXTERNAL LIBRARIES TO EXECUTABLE
LINK_DIRECTORIES(${SFML_LIB}/lib ${TINY_XML_LIB}/lib)

add_executable(SuperMario ${PRIVATE_SOURCES})

if (MSVC)
	set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT SuperMario)
	set_target_properties( SuperMario PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}Build)
	set_target_properties( SuperMario PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}Build)
	set(CMAKE_EXE_LINKER_FLAGS_RELEASE ${CMAKE_EXE_LINKER_FLAGS} SUBSYSTEMWINDOWS ENTRYmainCRTStartup)
endif(MSVC)

# ADD DEPENDISIES FOR EXECUTABLE
add_dependencies(SuperMario SFML TinyXml2)

target_link_libraries(SuperMario 
					optimized sfml-system		debug sfml-system-d 
					optimized sfml-window		debug sfml-window-d 
					optimized sfml-graphics		debug sfml-graphics-d 
					optimized sfml-audio		debug sfml-audio-d 
					optimized tinyxml2		debug tinyxml2d
					Creatures
					GameObjects
					GameEngine)  


CollectIncludeDirectories(
  ${CMAKE_CURRENT_SOURCE_DIR}
  PUBLIC_INCLUDES)

target_include_directories(SuperMario
	PUBLIC
		${PUBLIC_INCLUDES}
		Creatures
		GameObjects
		GameEngine
	PRIVATE
		${CMAKE_CURRENT_BINARY_DIR})

# POST BUILD SCRIPTS
set(POST_LIB_DIR "lib")
if (WIN32)
	set(POST_LIB_DIR "bin")
endif()

ADD_CUSTOM_COMMAND(TARGET SuperMario POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy_directory "${SFML_LIB}/${POST_LIB_DIR}" "${CMAKE_CURRENT_BINARY_DIR}"
	COMMAND ${CMAKE_COMMAND} -E copy_directory "${TINY_XML_LIB}/${POST_LIB_DIR}" "${CMAKE_CURRENT_BINARY_DIR}"
	COMMAND ${CMAKE_COMMAND} -E copy_directory "${CMAKE_SOURCE_DIR}/res" "${CMAKE_CURRENT_BINARY_DIR}/res")
